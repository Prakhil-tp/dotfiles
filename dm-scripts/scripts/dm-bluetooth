#!/bin/bash
# a script to turn on bluetooth and choose devices
deviceName=""
#power=$(echo -e "ON\nOFF\nSWITCH_DEVICES" | rofi -dmenu -i -p "Bluetooth" -config ~/.config/rofi/themes/dt-dmenu.rasi)
power=$(echo -e "ON\nOFF\nSWITCH_DEVICES\nSCAN" | rofi -dmenu -i -p "Bluetooth")
[ -z "$power" ] && exit 

function connectDevice {
  local devices=$(bluetoothctl -- devices)
  local choise=$(echo -e $devices | awk 'BEGIN{RS="Device";}NF{print $NF}'| rofi -dmenu -i -p "Devices")
  [ -z "$choise" ] && exit

  deviceName=$choise
  local deviceAddress=$(echo -e $devices | grep -w "$deviceName" | awk '{print $2}')
  local msg=$(bluetoothctl -- connect $deviceAddress)
  if [[ $msg == *"Connection successful"* ]]; then
    notify-send "$deviceName connected successfully"
  else
    notify-send "Failed to connect $deviceName"
    local ishandleError = $(echo -e "YES\nNO\n" | rofi -dmenu -i -p "Do you want to run Error Handler?")
    [ -z "$ishandleError" ] && exit

    case "$ishandleError" in
      YES)
        errorHandler
      ;;
    esac

  fi
  return $deviceAddress
}

function errorHandler {
    notify-send "Error handling. Please wait 5 seconds"
    pulseaudio --kill
    sleep 5
    pulseaudio --start
    notify-send "Pulseaudio restarting. Please wait 8 seconds"
    sleep 8 
    connectDevice
}

function switchOutputDevice {
  local sink=$(pactl list sinks short | awk -v d=$1 '{if($2 ~ d) print $1;}')
  local msg=$(pactl set-default-sink $sink)
  if [[ $msg == *"Failure"* ]]; then
    notify-send "Failed to switch output device"
  else
    notify-send "Sound output switched to $deviceName"
  fi
}

case "$power" in
  ON)
    bluetoothctl power on
    notify-send "Bluetooth turned on"
    connectDevice
    deviceAddress=$?
    device=$(echo $deviceAddress | sed 's/:/_/g')
    switchOutputDevice $device 
  ;;
  OFF) 
    bluetoothctl power off
    notify-send "Bluetooth turned off"
  ;;
  SWITCH_DEVICES)
    connectDevice
  ;;
  SCAN)
    scanChoice=$(echo -e "on\noff\n" | rofi -dmenu -i -p "Bluetooth SCAN")
    $(bluetoothctl -- scan $scanChoice)
  ;;
esac

